(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{438:function(s,n,a){s.exports=a.p+"assets/img/2.ebea57e7.png"},481:function(s,n,a){"use strict";a.r(n);var r=a(2),t=Object(r.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"前沿"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前沿"}},[s._v("#")]),s._v(" 前沿")]),s._v(" "),n("p",[s._v("亮点：")]),s._v(" "),n("p",[s._v("1、思维导图")]),s._v(" "),n("p",[s._v("2、例子代码")]),s._v(" "),n("h1",{attrs:{id:"思维导图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思维导图"}},[s._v("#")]),s._v(" 思维导图")]),s._v(" "),n("div",[n("img",{attrs:{src:a(438)}})]),s._v(" "),n("h1",{attrs:{id:"概要"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概要"}},[s._v("#")]),s._v(" 概要")]),s._v(" "),n("ul",[n("li",[s._v("主要讲解十大排序，基于js实现")]),s._v(" "),n("li",[s._v("总结是空间换时间、时间换空间")])]),s._v(" "),n("h1",{attrs:{id:"时间复杂度为o-n-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度为o-n-2"}},[s._v("#")]),s._v(" 时间复杂度为O（n^2）")]),s._v(" "),n("h2",{attrs:{id:"冒泡排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[s._v("#")]),s._v(" 冒泡排序")]),s._v(" "),n("p",[s._v("js代码实现")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("function bubbleSort(arr) {\n    const n = arr.length;\n    let swapped;\n\n    // 外层循环控制排序的轮数\n    for (let i = 0; i < n - 1; i++) {\n        swapped = false; // 每一轮开始时假设没有交换\n\n        // 内层循环进行相邻元素的比较和交换\n        for (let j = 0; j < n - 1 - i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // 交换\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n                swapped = true; // 记录发生了交换\n            }\n        }\n\n        // 如果这一轮没有交换，数组已经是有序的，可以提前退出\n        if (!swapped) {\n            break;\n        }\n    }\n\n    return arr;\n}\n\n// 示例\nconst arr = [64, 34, 25, 12, 22, 11, 90];\nconst sortedArr = bubbleSort(arr);\nconsole.log(sortedArr);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("操作解释")]),s._v(" "),n("ol",[n("li",[s._v("外层循环：控制整个排序的轮数。每次迭代确保至少将一个元素放到正确的位置。")]),s._v(" "),n("li",[s._v("内层循环：比较相邻的元素，如果它们的顺序错误，则交换它们。"),n("code",[s._v("n - 1 - i")]),s._v(" 是因为每轮后最大的元素会被放到正确的位置，所以可以减少比较的次数。")]),s._v(" "),n("li",[s._v("优化：使用 "),n("code",[s._v("swapped")]),s._v(" 标志，如果一轮内没有交换，说明数组已经有序，可以提前退出循环，从而提高效率。")])]),s._v(" "),n("h2",{attrs:{id:"插入排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[s._v("#")]),s._v(" 插入排序")]),s._v(" "),n("p",[s._v("基于js代码实现")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("function insertionSort(arr) {\n    for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n\n        // 将大于 key 的元素移动到右边\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n\n        // 将 key 插入到合适的位置\n        arr[j + 1] = key;\n    }\n    return arr;\n}\n\n// 示例用法\nconst array = [5, 2, 9, 1, 5, 6];\nconst sortedArray = insertionSort(array);\nconsole.log(sortedArray); // 输出: [1, 2, 5, 5, 6, 9]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("操作解释")]),s._v(" "),n("ol",[n("li",[s._v("外层循环：从第二个元素开始遍历数组（索引从 1 开始），将每个元素视为待插入的 "),n("code",[s._v("key")]),s._v("。")]),s._v(" "),n("li",[s._v("内层循环：从 "),n("code",[s._v("key")]),s._v(" 的前一个元素开始，向左遍历已排序部分，将大于 "),n("code",[s._v("key")]),s._v(" 的元素向右移动一位，为 "),n("code",[s._v("key")]),s._v(" 腾出位置。")]),s._v(" "),n("li",[s._v("插入：将 "),n("code",[s._v("key")]),s._v(" 插入到正确的位置。")])]),s._v(" "),n("h1",{attrs:{id:"时间复杂度为o-log-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度为o-log-n"}},[s._v("#")]),s._v(" 时间复杂度为O（log(n)）")]),s._v(" "),n("h2",{attrs:{id:"快速排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[s._v("#")]),s._v(" 快速排序")]),s._v(" "),n("p",[s._v("基于js代码实现")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("function quickSort(arr) {\n    // 基础情况：数组为空或只包含一个元素\n    if (arr.length <= 1) {\n        return arr;\n    }\n\n    // 选择基准（pivot），这里选择数组的最后一个元素\n    const pivot = arr[arr.length - 1];\n    const left = [];  // 存放小于基准的元素\n    const right = []; // 存放大于基准的元素\n\n    // 遍历数组（不包括基准）\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]); // 小于基准的放左边\n        } else {\n            right.push(arr[i]); // 大于基准的放右边\n        }\n    }\n\n    // 递归调用快速排序并合并结果\n    return [...quickSort(left), pivot, ...quickSort(right)];\n}\n\n// 示例用法\nconst array = [5, 2, 9, 1, 5, 6];\nconst sortedArray = quickSort(array);\nconsole.log(sortedArray); // 输出: [1, 2, 5, 5, 6, 9]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("操作")]),s._v(" "),n("ol",[n("li",[s._v("基础情况：如果数组为空或只包含一个元素，则直接返回该数组，因为它已经是有序的。")]),s._v(" "),n("li",[s._v("选择基准：选择数组的最后一个元素作为基准（"),n("code",[s._v("pivot")]),s._v("）。")]),s._v(" "),n("li",[s._v("分割数组：遍历数组（不包括基准），将小于基准的元素放入 "),n("code",[s._v("left")]),s._v(" 数组，大于基准的元素放入 "),n("code",[s._v("right")]),s._v(" 数组。")]),s._v(" "),n("li",[s._v("递归调用：分别对 "),n("code",[s._v("left")]),s._v(" 和 "),n("code",[s._v("right")]),s._v(" 数组进行快速排序，并将结果合并，最后在中间插入基准。")])]),s._v(" "),n("h2",{attrs:{id:"归并排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[s._v("#")]),s._v(" 归并排序")]),s._v(" "),n("p",[s._v("基于js代码实现")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("function mergeSort(arr) {\n    // 基础情况：数组为空或只包含一个元素\n    if (arr.length <= 1) {\n        return arr;\n    }\n\n    // 找到中间索引\n    const mid = Math.floor(arr.length / 2);\n    // 递归分割数组\n    const left = mergeSort(arr.slice(0, mid));\n    const right = mergeSort(arr.slice(mid));\n\n    // 合并已排序的子数组\n    return merge(left, right);\n}\n\nfunction merge(left, right) {\n    const result = [];\n    let i = 0; // 左边数组的指针\n    let j = 0; // 右边数组的指针\n\n    // 合并两个已排序的数组\n    while (i < left.length && j < right.length) {\n        if (left[i] < right[j]) {\n            result.push(left[i]);\n            i++;\n        } else {\n            result.push(right[j]);\n            j++;\n        }\n    }\n\n    // 将剩余元素添加到结果数组\n    return result.concat(left.slice(i)).concat(right.slice(j));\n}\n\n// 示例用法\nconst array = [5, 2, 9, 1, 5, 6];\nconst sortedArray = mergeSort(array);\nconsole.log(sortedArray); // 输出: [1, 2, 5, 5, 6, 9]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br")])]),n("p",[s._v("操作")]),s._v(" "),n("ol",[n("li",[s._v("基础情况：如果数组为空或只包含一个元素，直接返回该数组。")]),s._v(" "),n("li",[s._v("分割数组：通过中间索引将数组分为两个子数组，分别递归调用 "),n("code",[s._v("mergeSort")]),s._v(" 进行排序。")]),s._v(" "),n("li",[s._v("合并：使用 "),n("code",[s._v("merge")]),s._v(" 函数将两个已排序的子数组合并成一个有序数组。该函数使用两个指针遍历两个子数组，并比较元素，将较小的元素放入结果数组中。")]),s._v(" "),n("li",[s._v("返回结果：在合并完成后，返回合并后的有序数组。")])]),s._v(" "),n("h2",{attrs:{id:"希尔排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序"}},[s._v("#")]),s._v(" 希尔排序")]),s._v(" "),n("p",[s._v("js实现")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("function shellSort(arr) {\n    const n = arr.length;\n    let gap = Math.floor(n / 2); // 初始间隔为数组长度的一半\n\n    // 逐步缩小间隔\n    while (gap > 0) {\n        // 对每个间隔进行插入排序\n        for (let i = gap; i < n; i++) {\n            const temp = arr[i]; // 当前要插入的元素\n            let j = i; // 当前元素的索引\n\n            // 插入排序\n            while (j >= gap && arr[j - gap] > temp) {\n                arr[j] = arr[j - gap]; // 移动元素\n                j -= gap; // 更新索引\n            }\n\n            arr[j] = temp; // 插入当前元素\n        }\n        gap = Math.floor(gap / 2); // 缩小间隔\n    }\n\n    return arr;\n}\n\n// 示例用法\nconst array = [5, 2, 9, 1, 5, 6];\nconst sortedArray = shellSort(array);\nconsole.log(sortedArray); // 输出: [1, 2, 5, 5, 6, 9]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("操作")]),s._v(" "),n("ol",[n("li",[s._v("初始化间隔：设置初始间隔为数组长度的一半。")]),s._v(" "),n("li",[s._v("逐步缩小间隔：在 "),n("code",[s._v("while")]),s._v(" 循环中，逐步减小间隔（gap）。")]),s._v(" "),n("li",[s._v("插入排序：对于每个间隔，进行插入排序。内层循环负责将当前元素插入到正确的位置。")]),s._v(" "),n("li",[s._v("返回结果：完成排序后返回排序后的数组。")])]),s._v(" "),n("h1",{attrs:{id:"时间复杂度为o-nlog-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度为o-nlog-n"}},[s._v("#")]),s._v(" 时间复杂度为O（nlog(n)）")]),s._v(" "),n("h2",{attrs:{id:"堆排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#堆排序"}},[s._v("#")]),s._v(" 堆排序")]),s._v(" "),n("p",[s._v("基于js实现")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("function heapSort(arr) {\n    const n = arr.length;\n\n    // 构建最大堆\n    function buildMaxHeap() {\n        for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n            heapify(i, n);\n        }\n    }\n\n    // 堆化\n    function heapify(i, heapSize) {\n        let largest = i;\n        const left = 2 * i + 1; // 左子节点\n        const right = 2 * i + 2; // 右子节点\n\n        if (left < heapSize && arr[left] > arr[largest]) {\n            largest = left;\n        }\n        if (right < heapSize && arr[right] > arr[largest]) {\n            largest = right;\n        }\n        if (largest !== i) {\n            [arr[i], arr[largest]] = [arr[largest], arr[i]]; // 交换\n            heapify(largest, heapSize); // 递归堆化\n        }\n    }\n\n    buildMaxHeap();\n\n    // 进行排序\n    for (let i = n - 1; i > 0; i--) {\n        [arr[0], arr[i]] = [arr[i], arr[0]]; // 将最大元素放到数组末尾\n        heapify(0, i); // 对剩余的元素进行堆化\n    }\n\n    return arr;\n}\n\n// 示例\nconst arr = [3, 5, 1, 10, 2, 7];\nconst sortedArr = heapSort(arr);\nconsole.log(sortedArr);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br")])]),n("p",[s._v("代码解释")]),s._v(" "),n("ol",[n("li",[s._v("构建最大堆："),n("code",[s._v("buildMaxHeap")]),s._v(" 函数从最后一个非叶子节点开始，向上调整每个节点，构建出一个最大堆。")]),s._v(" "),n("li",[s._v("堆化："),n("code",[s._v("heapify")]),s._v(" 函数确保以 "),n("code",[s._v("i")]),s._v(" 为根的子树是一个最大堆。它检查当前节点与其左右子节点的值，若有子节点比当前节点大，则进行交换，并递归调整。")]),s._v(" "),n("li",[s._v("排序过程：在 "),n("code",[s._v("heapSort")]),s._v(" 函数中，将最大元素（根节点）与数组末尾的元素交换，然后对剩余的元素重新堆化，以保证它们依然形成最大堆。")])]),s._v(" "),n("h1",{attrs:{id:"时间复杂度为o-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度为o-n"}},[s._v("#")]),s._v(" 时间复杂度为O（n）")]),s._v(" "),n("h2",{attrs:{id:"桶排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桶排序"}},[s._v("#")]),s._v(" 桶排序")]),s._v(" "),n("p",[s._v("基于js实现")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("function bucketSort(arr) {\n    if (arr.length === 0) return [];\n\n    // 1. 创建桶\n    const minValue = Math.min(...arr);\n    const maxValue = Math.max(...arr);\n    const bucketCount = Math.floor((maxValue - minValue) / arr.length) + 1;\n    const buckets = Array.from({ length: bucketCount }, () => []);\n\n    // 2. 将元素放入桶中\n    for (let num of arr) {\n        const index = Math.floor((num - minValue) / arr.length);\n        buckets[index].push(num);\n    }\n\n    // 3. 对每个桶进行排序并合并结果\n    return buckets.reduce((sortedArr, bucket) => {\n        return sortedArr.concat(bucket.sort((a, b) => a - b));\n    }, []);\n}\n\n// 示例\nconst arr = [0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12];\nconst sortedArr = bucketSort(arr);\nconsole.log(sortedArr);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[s._v("代码解释")]),s._v(" "),n("ol",[n("li",[s._v("创建桶：根据数组中的最小值和最大值，计算出桶的数量，并初始化桶数组。")]),s._v(" "),n("li",[s._v("将元素放入桶中：根据每个元素的值计算它应该放入哪个桶中。")]),s._v(" "),n("li",[s._v("排序并合并结果：对每个桶内的元素进行排序，然后将它们合并成一个最终的排序数组。")])]),s._v(" "),n("h2",{attrs:{id:"计数排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#计数排序"}},[s._v("#")]),s._v(" 计数排序")]),s._v(" "),n("p",[s._v("基于js实现")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v(" function countingSort(arr) {\n    if (arr.length === 0) return arr;\n\n    // 找到最大值和最小值\n    const min = Math.min(...arr);\n    const max = Math.max(...arr);\n    const range = max - min + 1;\n\n    // 创建计数数组\n    const count = new Array(range).fill(0);\n\n    // 计数每个元素出现的次数\n    for (let num of arr) {\n        count[num - min]++;\n    }\n\n    // 累加计数数组\n    for (let i = 1; i < count.length; i++) {\n        count[i] += count[i - 1];\n    }\n\n    // 创建输出数组\n    const output = new Array(arr.length);\n\n    // 根据计数数组填充输出数组\n    for (let i = arr.length - 1; i >= 0; i--) {\n        const num = arr[i];\n        output[count[num - min] - 1] = num;\n        count[num - min]--;\n    }\n\n    return output;\n}\n\n// 示例用法\nconst arr = [4, 2, 2, 8, 3, 3, 1];\nconst sortedArr = countingSort(arr);\nconsole.log(sortedArr); // 输出: [1, 2, 2, 3, 3, 4, 8]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("p",[s._v("代码解释")]),s._v(" "),n("ol",[n("li",[s._v("找到最大值和最小值：用 "),n("code",[s._v("Math.min")]),s._v(" 和 "),n("code",[s._v("Math.max")]),s._v(" 方法找到数组中的最大和最小值，以确定计数数组的大小。")]),s._v(" "),n("li",[s._v("创建计数数组：根据值的范围创建一个计数数组，并用零填充。")]),s._v(" "),n("li",[s._v("计数：遍历原数组，记录每个元素的出现次数。")]),s._v(" "),n("li",[s._v("累加计数：对计数数组进行累加，使得每个位置存储的是该元素在排序后应该出现的最后位置。")]),s._v(" "),n("li",[s._v("填充输出数组：从原数组的最后一个元素开始，根据计数数组确定每个元素在输出数组中的位置，并更新计数数组。")]),s._v(" "),n("li",[s._v("返回结果：返回排序后的数组。")])]),s._v(" "),n("h1",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),n("p",[s._v("主要是收集每个实现js的代码")])])}),[],!1,null,null,null);n.default=t.exports}}]);