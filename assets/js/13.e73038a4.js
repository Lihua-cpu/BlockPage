(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{339:function(s,n,a){s.exports=a.p+"assets/img/1.a1a312d7.png"},340:function(s,n,a){s.exports=a.p+"assets/img/2.f1ccf067.png"},341:function(s,n,a){s.exports=a.p+"assets/img/3.f6045c42.png"},479:function(s,n,a){"use strict";a.r(n);var t=a(2),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"一、前沿"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、前沿"}},[s._v("#")]),s._v(" 一、前沿")]),s._v(" "),n("h2",{attrs:{id:"亮点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#亮点"}},[s._v("#")]),s._v(" 亮点：")]),s._v(" "),n("p",[s._v("1、思维导图")]),s._v(" "),n("p",[s._v("2、js实现")]),s._v(" "),n("p",[s._v("3、参考资料")]),s._v(" "),n("p",[s._v("4、思维导图里面的算法可视化网站")]),s._v(" "),n("h1",{attrs:{id:"二、思维导图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、思维导图"}},[s._v("#")]),s._v(" 二、思维导图")]),s._v(" "),n("p",[s._v("三个思维导图：前面两个是什么语言都是通用的，第三个是基于js的，可以结合前面两个和js语言特点来实现。")]),s._v(" "),n("p",[s._v("这三个思维导图还是挺有保存意义的")]),s._v(" "),n("h2",{attrs:{id:"计算机数据结构思维导图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#计算机数据结构思维导图"}},[s._v("#")]),s._v(" 计算机数据结构思维导图")]),s._v(" "),n("div",[n("img",{attrs:{src:a(339)}})]),s._v(" "),n("h2",{attrs:{id:"计算机算法思维导图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#计算机算法思维导图"}},[s._v("#")]),s._v(" 计算机算法思维导图")]),s._v(" "),n("div",[n("img",{attrs:{src:a(340)}})]),s._v(" "),n("h2",{attrs:{id:"js数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js数据结构"}},[s._v("#")]),s._v(" JS数据结构")]),s._v(" "),n("div",[n("img",{attrs:{src:a(341)}})]),s._v(" "),n("h1",{attrs:{id:"二、概要"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、概要"}},[s._v("#")]),s._v(" 二、概要")]),s._v(" "),n("p",[s._v("先要了解数据结构，在了解算法，然后是相辅相成。因为有些算法是基于数据结构来实现的")]),s._v(" "),n("p",[s._v("js的数据结构有自己的特点，而且内置api有JSON这种与数据结构相关的")]),s._v(" "),n("h1",{attrs:{id:"三、数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、数据结构"}},[s._v("#")]),s._v(" 三、数据结构")]),s._v(" "),n("h2",{attrs:{id:"_3-1、非受限数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、非受限数据结构"}},[s._v("#")]),s._v(" 3.1、非受限数据结构")]),s._v(" "),n("p",[s._v("这个主要是说一些不受条件限制的一些数据结构比如：数组、链表，关于数组，js有提供专门的容器比如Array，但是链表来说，需要自己定义或者第三方")]),s._v(" "),n("h3",{attrs:{id:"数组array"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组array"}},[s._v("#")]),s._v(" 数组array")]),s._v(" "),n("p",[s._v("描述")]),s._v(" "),n("ul",[n("li",[s._v("主要分为一维数组、二维数组，多维数组")]),s._v(" "),n("li",[s._v("优点：随机访问：可以通过索引在 O(1) 时间内快速访问任何元素；内存效率：所有元素存储在连续的内存位置，访问速度较快。")]),s._v(" "),n("li",[s._v("缺点：a插入和删除效率低：在数组中间插入或删除元素时，可能需要移动大量元素，时间复杂度为 O(n)。b固定大小：一旦创建，数组的大小通常是固定的，无法动态扩展。")])]),s._v(" "),n("p",[n("strong",[s._v("关于缺点")])]),s._v(" "),n("p",[s._v("主要是js内置了array，扩展数组长度能够看起来无感，其实看源代码，比如java的数组，他的实现ArrayList，里面的对push操作有判断，需要如果超过了就需要分配空间，但是对于js来说可以不固定。")]),s._v(" "),n("p",[n("strong",[s._v("基于js的操作")])]),s._v(" "),n("p",[s._v("具体可以看说明书：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript")]),s._v(" "),n("p",[s._v("const arr = [1, 2, 3];")]),s._v(" "),n("ul",[n("li",[s._v("添加元素")])]),s._v(" "),n("p",[s._v("arr.push(4); "),n("em",[s._v("// arr 变为 [1, 2, 3, 4]")])]),s._v(" "),n("p",[s._v("arr.unshift(0); "),n("em",[s._v("// arr 变为 [0, 1, 2, 3, 4]")])]),s._v(" "),n("ul",[n("li",[s._v("删除元素")])]),s._v(" "),n("p",[s._v("const last = arr.pop(); "),n("em",[s._v("// last 是 4, arr 变为 [0, 1, 2, 3]")])]),s._v(" "),n("p",[s._v("const first = arr.shift(); "),n("em",[s._v("// first 是 0, arr 变为 [1, 2, 3]")])]),s._v(" "),n("ul",[n("li",[s._v("访问元素")])]),s._v(" "),n("p",[s._v("const firstElement = arr[0]; "),n("em",[s._v("// 访问第一个元素")])]),s._v(" "),n("p",[s._v("arr[1] = 5; "),n("em",[s._v("// 修改第二个元素")])]),s._v(" "),n("ul",[n("li",[s._v("遍历元素")])]),s._v(" "),n("p",[s._v("for (let i = 0; i < arr.length; i++) { console.log(arr[i]); }")]),s._v(" "),n("p",[s._v("arr.forEach((element) => { console.log(element); });")]),s._v(" "),n("ul",[n("li",[s._v("数组操作")])]),s._v(" "),n("p",[s._v("const newArr = arr.slice(1, 3); "),n("em",[s._v("// 返回 [2, 3]")])]),s._v(" "),n("p",[s._v("arr.splice(1, 1, 10); "),n("em",[s._v("// 从索引1开始删除1个元素并添加10，arr 变为 [1, 10, 3]")])]),s._v(" "),n("ul",[n("li",[s._v("查找")])]),s._v(" "),n("p",[s._v("const index = arr.indexOf(10); "),n("em",[s._v("// 返回 1")])]),s._v(" "),n("p",[s._v("const hasTen = arr.includes(10); "),n("em",[s._v("// 返回 true")])]),s._v(" "),n("ul",[n("li",[s._v("数组反转与排序")])]),s._v(" "),n("p",[s._v("arr.sort(); "),n("em",[s._v("// 默认按字符串Unicode顺序排序")])]),s._v(" "),n("p",[s._v("arr.reverse(); "),n("em",[s._v("// arr 反转")])]),s._v(" "),n("ul",[n("li",[s._v("合并数组")])]),s._v(" "),n("p",[s._v("const arr1 = [1, 2];")]),s._v(" "),n("p",[s._v("const arr2 = [3, 4];")]),s._v(" "),n("p",[s._v("const combined = arr1.concat(arr2); "),n("em",[s._v("// [1, 2, 3, 4]")])]),s._v(" "),n("ul",[n("li",[s._v("转化数组")])]),s._v(" "),n("p",[s._v("const str = arr.join('-'); "),n("em",[s._v("// '1-10-3'")])]),s._v(" "),n("p",[s._v("使用场景")]),s._v(" "),n("ul",[n("li",[s._v("存列表数据")]),s._v(" "),n("li",[s._v("排序和过滤")]),s._v(" "),n("li",[s._v("实现队列、栈")])]),s._v(" "),n("h3",{attrs:{id:"链表link"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#链表link"}},[s._v("#")]),s._v(" 链表link")]),s._v(" "),n("p",[s._v("具体讲解链表需要单独开文章（TODO）")]),s._v(" "),n("p",[s._v("描述")]),s._v(" "),n("ul",[n("li",[s._v("链表也有多种：单链表、双链表、循环链表")])]),s._v(" "),n("p",[s._v("js（单链表）实现")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、新建节点类（Node）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("data "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点数据")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向下一个节点的引用")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、新建链表类（LinkedList）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 链表的头节点")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 链表的大小")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 添加节点到链表末尾")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果链表为空，头节点指向新节点")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 遍历到链表末尾")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将新节点添加到末尾")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 增加链表大小")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 插入节点到指定位置")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("insert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" index "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 索引无效")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" newNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            newNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 头插")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" previous"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                previous "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录前一个节点")]),s._v("\n                current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                count"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            newNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 新节点指向当前节点")]),s._v("\n            previous"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前一个节点指向新节点")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 删除指定位置的节点")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" index "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 索引无效")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 删除头节点")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" previous"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                previous "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                count"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            previous"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前一个节点跳过当前节点")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印链表")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" elements "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            elements"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elements"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("' -> '")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3、使用")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出: 10 -> 20 -> 30")]),s._v("\n\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("insert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出: 10 -> 15 -> 20 -> 30")]),s._v("\n\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出: 10 -> 15 -> 30")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br")])]),n("p",[s._v("使用场景")]),s._v(" "),n("ul",[n("li",[s._v("动态大小的数据存储")]),s._v(" "),n("li",[s._v("实现队列和栈")]),s._v(" "),n("li",[s._v("特定算法的实现（某些算法（如链表排序、合并两个有序链表）直接使用单链表作为基础数据结构，以提高效率。）")]),s._v(" "),n("li",[s._v("多线程或异步处理（在需要处理任务队列的多线程或异步环境中，单链表可以用于维护任务的顺序，确保按顺序处理。）")]),s._v(" "),n("li",[s._v("图形和游戏开发")])]),s._v(" "),n("h2",{attrs:{id:"_3-2、受限数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、受限数据结构"}},[s._v("#")]),s._v(" 3.2、受限数据结构")]),s._v(" "),n("p",[s._v("受限的比如栈、队列、堆，但是js没有内置提供专门的api、属性，所以需要自己实现或者第三方")]),s._v(" "),n("h3",{attrs:{id:"栈stack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#栈stack"}},[s._v("#")]),s._v(" 栈stack")]),s._v(" "),n("p",[s._v("描述")]),s._v(" "),n("ul",[n("li",[s._v("栈的一般限制是先进后出")])]),s._v(" "),n("p",[s._v("js实现：")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("class Stack {\n    constructor() {\n        this.items = []; // 存储栈的元素\n    }\n\n    // 入栈\n    push(element) {\n        this.items.push(element);\n    }\n\n    // 出栈\n    pop() {\n        if (this.isEmpty()) {\n            return null; // 栈为空，返回null\n        }\n        return this.items.pop();\n    }\n\n    // 查看栈顶元素\n    peek() {\n        if (this.isEmpty()) {\n            return null; // 栈为空，返回null\n        }\n        return this.items[this.items.length - 1];\n    }\n\n    // 检查栈是否为空\n    isEmpty() {\n        return this.items.length === 0;\n    }\n\n    // 返回栈的大小\n    size() {\n        return this.items.length;\n    }\n\n    // 打印栈\n    print() {\n        console.log(this.items.join(' '));\n    }\n}\n\n// 使用示例\nconst stack = new Stack();\nstack.push(10);\nstack.push(20);\nstack.push(30);\nstack.print(); // 输出: 10 20 30\nconsole.log(stack.pop()); // 输出: 30\nconsole.log(stack.peek()); // 输出: 20\nstack.print(); // 输出: 10 20\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br")])]),n("p",[s._v("基本操作")]),s._v(" "),n("ul",[n("li",[s._v("入栈（Push）：将元素添加到栈的顶部。")]),s._v(" "),n("li",[s._v("出栈（Pop）：移除并返回栈顶部的元素。")]),s._v(" "),n("li",[s._v("查看栈顶元素（Peek）：返回栈顶部的元素，但不移除它。")]),s._v(" "),n("li",[s._v("检查栈是否为空（IsEmpty）：判断栈中是否还有元素。")])]),s._v(" "),n("p",[s._v("常用场景：")]),s._v(" "),n("ul",[n("li",[s._v("函数调用管理")]),s._v(" "),n("li",[s._v("撤销功能")]),s._v(" "),n("li",[s._v("深度优先搜索（DFS）")]),s._v(" "),n("li",[s._v("状态管理")])]),s._v(" "),n("h3",{attrs:{id:"队列queue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#队列queue"}},[s._v("#")]),s._v(" 队列queue")]),s._v(" "),n("p",[s._v("描述")]),s._v(" "),n("ul",[n("li",[s._v("队列来说一般是先进先出")]),s._v(" "),n("li",[s._v("队列来说是单端队列，也可以双端队列")])]),s._v(" "),n("p",[s._v("js实现双端队列：")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("class Deque {\n    constructor() {\n        this.items = [];\n    }\n\n    // 从队尾插入元素\n    enqueueBack(element) {\n        this.items.push(element);\n    }\n\n    // 从队首插入元素\n    enqueueFront(element) {\n        this.items.unshift(element);\n    }\n\n    // 从队首移除元素\n    dequeueFront() {\n        if (this.isEmpty()) {\n            return null; // 或者抛出错误\n        }\n        return this.items.shift();\n    }\n\n    // 从队尾移除元素\n    dequeueBack() {\n        if (this.isEmpty()) {\n            return null; // 或者抛出错误\n        }\n        return this.items.pop();\n    }\n\n    // 查看队首元素\n    front() {\n        if (this.isEmpty()) {\n            return null; // 或者抛出错误\n        }\n        return this.items[0];\n    }\n\n    // 查看队尾元素\n    back() {\n        if (this.isEmpty()) {\n            return null; // 或者抛出错误\n        }\n        return this.items[this.items.length - 1];\n    }\n\n    // 检查双端队列是否为空\n    isEmpty() {\n        return this.items.length === 0;\n    }\n\n    // 获取双端队列的大小\n    size() {\n        return this.items.length;\n    }\n\n    // 清空双端队列\n    clear() {\n        this.items = [];\n    }\n}\n\n// 使用示例\nconst deque = new Deque();\ndeque.enqueueBack(1);\ndeque.enqueueBack(2);\ndeque.enqueueFront(0);\n\nconsole.log(deque.front()); // 输出: 0\nconsole.log(deque.back());  // 输出: 2\n\nconsole.log(deque.dequeueFront()); // 输出: 0\nconsole.log(deque.dequeueBack());  // 输出: 2\n\nconsole.log(deque.size()); // 输出: 1\nconsole.log(deque.isEmpty()); // 输出: false\n\ndeque.clear();\nconsole.log(deque.isEmpty()); // 输出: true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br")])]),n("p",[s._v("操作：")]),s._v(" "),n("ul",[n("li",[s._v("enqueueBack：在队尾插入元素。")]),s._v(" "),n("li",[s._v("enqueueFront：在队首插入元素。")]),s._v(" "),n("li",[s._v("dequeueFront：从队首移除并返回元素。")]),s._v(" "),n("li",[s._v("dequeueBack：从队尾移除并返回元素。")]),s._v(" "),n("li",[s._v("front：查看队首元素但不移除。")]),s._v(" "),n("li",[s._v("back：查看队尾元素但不移除。")]),s._v(" "),n("li",[s._v("isEmpty：检查双端队列是否为空。")]),s._v(" "),n("li",[s._v("size：返回双端队列中元素的数量。")]),s._v(" "),n("li",[s._v("clear：清空双端队列。")])]),s._v(" "),n("p",[s._v("常用场景：")]),s._v(" "),n("ol",[n("li",[s._v("任务调度：在需要优先处理的任务和普通任务之间进行高效管理时，可以将优先任务插入队首，普通任务插入队尾。")]),s._v(" "),n("li",[s._v("缓存实现：如 LRU（最近最少使用）缓存策略，可以使用双端队列来快速地将最近使用的项移动到队首，过期的项可以从队尾移除。")]),s._v(" "),n("li",[s._v("回溯算法：在深度优先搜索（DFS）或某些图形遍历中，可以使用双端队列来存储路径，从而能够在遍历过程中灵活地添加和删除节点。")]),s._v(" "),n("li",[s._v("字符串处理：在需要频繁地从两端添加或删除字符的场景中，比如回文判断，可以使用双端队列来高效管理字符串的状态。")]),s._v(" "),n("li",[s._v("消息队列：在实时系统或网络服务中，双端队列可以用来实现生产者-消费者模式，允许生产者在两端添加消息，消费者则可以从任意一端取出消息。")]),s._v(" "),n("li",[s._v("滑动窗口问题：在处理需要跟踪数据流的滑动窗口问题时，双端队列可以有效维护当前窗口的状态，支持快速插入和删除。")])]),s._v(" "),n("h3",{attrs:{id:"堆heap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#堆heap"}},[s._v("#")]),s._v(" 堆heap")]),s._v(" "),n("p",[s._v("描述")]),s._v(" "),n("ul",[n("li",[s._v("堆是一种特殊的树形数据结构。更具体地说，堆是一种完全二叉树")]),s._v(" "),n("li",[s._v("堆是一个完全二叉树，这意味着除了最后一层外，每一层都是完全填满的，最后一层的节点都在左侧")]),s._v(" "),n("li",[s._v("堆可以是最大堆或最小堆（最大堆：每个节点的值都大于或等于其子节点的值，最小堆：每个节点的值都小于或等于其子节点的值。）")])]),s._v(" "),n("p",[s._v("js的最小堆实现")]),s._v(" "),n("p",[s._v("下面是通过数组array实现的，根据链表的还没实现")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("class MinHeap {\n    constructor() {\n        this.heap = [];\n    }\n\n    // 获取父节点索引\n    getParentIndex(index) {\n        return Math.floor((index - 1) / 2);\n    }\n\n    // 获取左子节点索引\n    getLeftChildIndex(index) {\n        return index * 2 + 1;\n    }\n\n    // 获取右子节点索引\n    getRightChildIndex(index) {\n        return index * 2 + 2;\n    }\n\n    // 交换两个元素\n    swap(index1, index2) {\n        [this.heap[index1], this.heap[index2]] = [this.heap[index2], this.heap[index1]];\n    }\n\n    // 向堆中插入元素\n    insert(value) {\n        this.heap.push(value);\n        this.bubbleUp();\n    }\n\n    // 上浮操作\n    bubbleUp() {\n        let index = this.heap.length - 1;\n        while (index > 0) {\n            const parentIndex = this.getParentIndex(index);\n            if (this.heap[index] >= this.heap[parentIndex]) break;\n            this.swap(index, parentIndex);\n            index = parentIndex;\n        }\n    }\n\n    // 从堆中删除最小元素\n    extractMin() {\n        if (this.heap.length === 0) return null;\n        if (this.heap.length === 1) return this.heap.pop();\n\n        const min = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this.bubbleDown();\n        return min;\n    }\n\n    // 下沉操作\n    bubbleDown() {\n        let index = 0;\n        const length = this.heap.length;\n\n        while (true) {\n            const leftChildIndex = this.getLeftChildIndex(index);\n            const rightChildIndex = this.getRightChildIndex(index);\n            let smallestIndex = index;\n\n            if (leftChildIndex < length && this.heap[leftChildIndex] < this.heap[smallestIndex]) {\n                smallestIndex = leftChildIndex;\n            }\n\n            if (rightChildIndex < length && this.heap[rightChildIndex] < this.heap[smallestIndex]) {\n                smallestIndex = rightChildIndex;\n            }\n\n            if (smallestIndex === index) break;\n\n            this.swap(index, smallestIndex);\n            index = smallestIndex;\n        }\n    }\n\n    // 获取最小元素但不移除\n    peek() {\n        return this.heap[0] || null;\n    }\n\n    // 获取堆的大小\n    size() {\n        return this.heap.length;\n    }\n\n    // 检查堆是否为空\n    isEmpty() {\n        return this.size() === 0;\n    }\n}\n\n// 使用示例\nconst minHeap = new MinHeap();\nminHeap.insert(10);\nminHeap.insert(5);\nminHeap.insert(3);\nminHeap.insert(8);\n\nconsole.log(minHeap.peek()); // 输出: 3\nconsole.log(minHeap.extractMin()); // 输出: 3\nconsole.log(minHeap.peek()); // 输出: 5\nconsole.log(minHeap.size()); // 输出: 3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br")])]),n("p",[s._v("常用场景")]),s._v(" "),n("p",[s._v("堆通常用于实现优先队列，支持高效的插入和删除最大（或最小）元素操作。虽然堆通常用数组实现，但其结构本质上是树形的。")]),s._v(" "),n("h2",{attrs:{id:"_3-3、树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3、树"}},[s._v("#")]),s._v(" 3.3、树")]),s._v(" "),n("p",[s._v("主要讲二叉树、哈夫曼树、字典树")]),s._v(" "),n("p",[s._v("1、树是一种逻辑结构，所以基于js能用array、linkList实现，其他语言如java，也可以用ArrayList、linkList实现等")]),s._v(" "),n("h3",{attrs:{id:"_3-3-1、普通二叉树-binary-tree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1、普通二叉树-binary-tree"}},[s._v("#")]),s._v(" 3.3.1、普通二叉树（Binary Tree）")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("定义")]),s._v("：普通二叉树是一个每个节点最多有两个子节点的树结构，没有其他特定的约束。")]),s._v(" "),n("li",[n("strong",[s._v("特点")]),s._v("：节点的分布没有限制，可以是任何形状。")])]),s._v(" "),n("h3",{attrs:{id:"_3-3-2、满二叉树-full-binary-tree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2、满二叉树-full-binary-tree"}},[s._v("#")]),s._v(" 3.3.2、满二叉树（Full Binary Tree）")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("定义")]),s._v("：每个非叶子节点都有两个子节点，且所有的叶子节点在同一层上。")]),s._v(" "),n("li",[n("strong",[s._v("特点")]),s._v("：结构非常规则，所有节点都被完全填满。")]),s._v(" "),n("li",[n("strong",[s._v("关系")]),s._v("：满二叉树是普通二叉树的一种特例。")]),s._v(" "),n("li",[s._v("解释：如何最后子节点没满，就不是满二叉树")])]),s._v(" "),n("h3",{attrs:{id:"_3-3-3、-完全二叉树-complete-binary-tree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3、-完全二叉树-complete-binary-tree"}},[s._v("#")]),s._v(" 3.3.3、 完全二叉树（Complete Binary Tree）")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("定义")]),s._v("：除了最后一层外，每一层都被完全填满，最后一层的节点必须从左到右填充。")]),s._v(" "),n("li",[n("strong",[s._v("特点")]),s._v("：最后一层可以不满，但节点填充是左对齐的。")]),s._v(" "),n("li",[n("strong",[s._v("关系")]),s._v("：完全二叉树也是普通二叉树的一种特例，但它比满二叉树更宽松，因为最后一层可以不满。")])]),s._v(" "),n("p",[s._v("js实现：")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v('class TreeNode {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass CompleteBinarySearchTree {\n    constructor() {\n        this.root = null;\n        this.nodes = []; // 用于保持插入顺序，支持完全二叉树结构\n    }\n\n    insert(value) {\n        const newNode = new TreeNode(value);\n        this.nodes.push(newNode); // 将节点添加到数组中\n        \n        if (this.root === null) {\n            this.root = newNode; // 如果树为空，则新节点为根节点\n        } else {\n            // 找到父节点\n            const index = this.nodes.length - 1;\n            const parentIndex = Math.floor((index - 1) / 2);\n            const parentNode = this.nodes[parentIndex];\n\n            if (index % 2 === 1) {\n                parentNode.left = newNode; // 左子节点\n            } else {\n                parentNode.right = newNode; // 右子节点\n            }\n        }\n    }\n\n    inOrderTraversal(node = this.root) {\n        if (node) {\n            this.inOrderTraversal(node.left);\n            console.log(node.value);\n            this.inOrderTraversal(node.right);\n        }\n    }\n\n    preOrderTraversal(node = this.root) {\n        if (node) {\n            console.log(node.value);\n            this.preOrderTraversal(node.left);\n            this.preOrderTraversal(node.right);\n        }\n    }\n\n    postOrderTraversal(node = this.root) {\n        if (node) {\n            this.postOrderTraversal(node.left);\n            this.postOrderTraversal(node.right);\n            console.log(node.value);\n        }\n    }\n}\n\n// 使用示例\nconst tree = new CompleteBinarySearchTree();\ntree.insert(10);\ntree.insert(5);\ntree.insert(15);\ntree.insert(3);\ntree.insert(7);\ntree.insert(12);\ntree.insert(18);\n\nconsole.log("In-order traversal:");\ntree.inOrderTraversal(); // 应该按照排序顺序输出\nconsole.log("Pre-order traversal:");\ntree.preOrderTraversal();\nconsole.log("Post-order traversal:");\ntree.postOrderTraversal();\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br")])]),n("h3",{attrs:{id:"_3-3-4-二叉搜索树-binary-search-tree-bst"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-二叉搜索树-binary-search-tree-bst"}},[s._v("#")]),s._v(" 3.3.4. 二叉搜索树（Binary Search Tree, BST）")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("定义")]),s._v("：一种特殊的二叉树，满足以下条件：对于每个节点，左子树的所有节点的值都小于该节点的值，右子树的所有节点的值都大于该节点的值。")]),s._v(" "),n("li",[n("strong",[s._v("特点")]),s._v("：二叉搜索树并不要求每个节点都有两个子节点，也没有层数的限制，但它必须满足排序的性质。")]),s._v(" "),n("li",[n("strong",[s._v("关系")]),s._v("：二叉搜索树是一种特殊的普通二叉树，但不一定是满二叉树或完全二叉树。")])]),s._v(" "),n("p",[s._v("js实现：")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v('class TreeNode {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass BinarySearchTree {\n    constructor() {\n        this.root = null;\n    }\n\n    insert(value) {\n        const newNode = new TreeNode(value);\n        if (this.root === null) {\n            this.root = newNode; // 如果树为空，设定新节点为根节点\n        } else {\n            this._insertNode(this.root, newNode); // 从根节点开始插入\n        }\n    }\n\n    _insertNode(node, newNode) {\n        if (newNode.value < node.value) {\n            if (node.left === null) {\n                node.left = newNode; // 左子树为空，插入新节点\n            } else {\n                this._insertNode(node.left, newNode); // 递归插入左子树\n            }\n        } else {\n            if (node.right === null) {\n                node.right = newNode; // 右子树为空，插入新节点\n            } else {\n                this._insertNode(node.right, newNode); // 递归插入右子树\n            }\n        }\n    }\n\n    find(value) {\n        return this._findNode(this.root, value);\n    }\n\n    _findNode(node, value) {\n        if (node === null) return false; // 节点为空，未找到\n        if (value === node.value) return true; // 找到节点\n        return value < node.value\n            ? this._findNode(node.left, value) // 递归查找左子树\n            : this._findNode(node.right, value); // 递归查找右子树\n    }\n\n    inOrderTraversal(node = this.root) {\n        if (node) {\n            this.inOrderTraversal(node.left);\n            console.log(node.value);\n            this.inOrderTraversal(node.right);\n        }\n    }\n}\n\n// 使用示例\nconst bst = new BinarySearchTree();\nbst.insert(10);\nbst.insert(5);\nbst.insert(15);\nbst.insert(3);\nbst.insert(7);\nbst.insert(12);\nbst.insert(18);\n\nconsole.log("In-order traversal:");\nbst.inOrderTraversal(); // 按升序输出\nconsole.log("Find 7:", bst.find(7)); // 输出 true\nconsole.log("Find 20:", bst.find(20)); // 输出 false\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br")])]),n("h3",{attrs:{id:"_3-3-5、总结关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-5、总结关系"}},[s._v("#")]),s._v(" 3.3.5、总结关系")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("普通二叉树")]),s._v(" 是一个广泛的概念，包含所有类型的二叉树。")]),s._v(" "),n("li",[n("strong",[s._v("满二叉树")]),s._v(" 和 "),n("strong",[s._v("完全二叉树")]),s._v(" 都是普通二叉树的特例，但有各自的结构要求。")]),s._v(" "),n("li",[n("strong",[s._v("二叉搜索树")]),s._v(" 也是普通二叉树的一种，强调了节点的值的排序特性，而不强调节点的数量或层数的完整性。")])]),s._v(" "),n("h2",{attrs:{id:"_3-4、图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4、图"}},[s._v("#")]),s._v(" 3.4、图")]),s._v(" "),n("p",[s._v("图接触不是很多，所以很难解释得清楚")]),s._v(" "),n("h2",{attrs:{id:"_3-5、其他"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-5、其他"}},[s._v("#")]),s._v(" 3.5、其他")]),s._v(" "),n("h3",{attrs:{id:"_3-5-1、set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1、set"}},[s._v("#")]),s._v(" 3.5.1、set")]),s._v(" "),n("p",[s._v("关于set主要是js的es6推出的，主要关注set与weakSet的区别、")]),s._v(" "),n("p",[s._v("记住set里面的数据是不可重复的，所以也能做去重操作")]),s._v(" "),n("p",[s._v("js使用")]),s._v(" "),n("div",{staticClass:"language-vue line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[s._v("const mySet = new Set();\nmySet.add(1);\nmySet.add({ name: 'Alice' });\nconsole.log(mySet); // Set(2) { 1, { name: 'Alice' } }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"_3-5-2、map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-2、map"}},[s._v("#")]),s._v(" 3.5.2、map")]),s._v(" "),n("h1",{attrs:{id:"四、算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、算法"}},[s._v("#")]),s._v(" 四、算法")]),s._v(" "),n("p",[s._v("专门独立一章《基于js的算法入门》")]),s._v(" "),n("h1",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),n("p",[s._v("1、https://blog.csdn.net/qq_37255976/article/details/134464573")]),s._v(" "),n("p",[s._v("2、https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures")])])}),[],!1,null,null,null);n.default=e.exports}}]);